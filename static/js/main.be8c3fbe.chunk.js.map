{"version":3,"sources":["img/pokeball.png","components/Wrapper/Wrapper.js","components/Header/Header.js","components/Instructions/Instructions.js","components/Navigation/Navigation.js","components/PokemonCard/PokemonCard.js","components/Footer/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Wrapper","props","className","children","Header","src","logo","alt","Instructions","Navigation","href","message","indexOf","style","color","curScore","topScore","PokemonCard","onClick","selectPokemon","pkmn","image","Footer","target","App","state","pokemon","unselectedPokemon","shuffleArray","array","i","length","j","Math","floor","random","undefined","find","item","setState","newPokemon","filter","this","map","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.be8c3fbe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokeball.441861dd.png\";","//Importing React Components\nimport React from \"react\";\nimport \"./Wrapper.css\";\n\n//Wrapper Div\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\n//Export Component for Use in the Rest of Application.\nexport default Wrapper;\n","//Importing React Components\nimport React from \"react\";\nimport logo from '../../img/pokeball.png';\nimport \"./Header.css\";\nimport Sound from 'react-sound';\n\n//Header Div\nconst Header = props => (\n    <div className=\"header\">\n        <header className=\"header-header\">\n            {/* <img src={logo} className=\"header-logo\" alt=\"logo\" /> */}\n            <img src={logo} className=\"header-logo\" alt=\"logo\" />\n            <h1 className=\"header-title\">PoKéMoN Clicky Game</h1>\n        </header>\n        \n        <br></br>\n\n    </div>\n);\n\n// Play Sound\n// soundRender() ;{\n//     return (\n//       <Sound\n//       url={\"../../sfx/win.mp3\"}\n//       playStatus={Sound.status.PLAYING}\n//       onLoading={this.handleSongLoading}\n//       onPlaying={this.handleSongPlaying}\n//       onFinishedPlaying={this.handleSongFinishedPlaying}\n//       />\n//      );\n//     }\n   \n\n//Export Component for Use in the Rest of Application.\nexport default Header;\n","//Importing React Components\nimport React from \"react\";\nimport \"./Instructions.css\";\n\n//Instruction Div\nconst Instructions = props => (\n    <div className=\"instructionsbox\">\n        {/* <h1>Pokemon Memory game!</h1> */}\n        <p>Trainer!  Click on PoKéMoN, but not on the same one twice.</p>\n    </div>\n);\n\n//Export Component for Use in the Rest of Application.\nexport default Instructions;","//Importing React Components\nimport React from \"react\";\nimport \"./Navigation.css\";\n\n//Scoring Box Div\nconst Navigation = props => (\n    <div>\n        <ul className=\"nav nav-pills nav-justified\">\n            <li><a href=\"/\">Restart</a></li>\n            <li\n                className={props.message.indexOf(\"Already clicked this Pokemon\") !== -1 ? \n                    \"desc-incorrect\" : \n                    props.message.indexOf(\"Good! Keep Trying!\") !== -1 ?\n                        \"desc-correct\" :\n                        \"desc-normal\"}\n            >\n                {props.message}\n            </li>\n            <li>Score: <span style={{color: \"rgb(97, 218, 251)\"}}>{props.curScore}</span> | Top Score: {props.topScore}</li>\n        </ul>\n    </div>\n);\n\n//Export Component for Use in the Rest of Application.\nexport default Navigation;\n","//Importing React Components\nimport React from \"react\";\nimport \"./PokemonCard.css\";\n// import UIfx from './uifx'\n// import winMp3 from \"../../sfx/win.mp3\"\n\n\n//Image Cards Div\nconst PokemonCard = props => (\n    <div className=\"card\">\n        <div className=\"img-container\">\n            <a onClick={() => props.selectPokemon(props.pkmn)} \n                className={props.curScore === 0 ? \"style_prevu_kit style_prevu_kit_ex\" : \"style_prevu_kit\"}\n            >\n                <img alt={props.pkmn} src={props.image} />\n            </a>\n        </div>\n    </div>\n);\n\n// Sound Effects (SFX)\n\n// const win = new UIfx(winMp3)\n// <button onClick={beep.play}>Signup</button>\n\n\n//Export Component for Use in the Rest of Application.\nexport default PokemonCard;\n","//Importing React Components\nimport React from \"react\";\nimport \"./Footer.css\";\n\n//Footer Div\nconst Footer = props => (\n    <div className=\"footer\">\n        <p>Creator: <a href=\"https://phoenixafterglow.com\" target=\"_blank\">Phoenix Afterglow<sup>TM</sup></a> | <a href=\"https://github.com/PhoenixAfterglow/clickity-click\" target=\"_blank\">GitHub</a></p>\n    </div>\n);\n\n//Export Component for Use in the Rest of Application.\nexport default Footer;","//Importing React Components\nimport React, { Component } from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper/\";\nimport Header from \"./components/Header/\";\nimport Instructions from \"./components/Instructions/\";\nimport Navigation from \"./components/Navigation\";\nimport PokemonCard from \"./components/PokemonCard\";\nimport pokemon from \"./pokemon.json\";\nimport Footer from \"./components/Footer/\";\n\nclass App extends Component {\n    //State of game score.\n    state = {\n        message: \"Click an image to begin!\",\n        topScore: 0,\n        curScore: 0,\n        pokemon: pokemon,\n        unselectedPokemon: pokemon\n    }\n\n    componentDidMount() {\n    }\n\n    //Function for moving images around the screen upon each click.\n    shuffleArray = array => {\n        for (let i = array.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n    }\n\n    //Function for scoring in game.\n    selectPokemon = pkmn => {\n        const findPokemon = this.state.unselectedPokemon.find(item => item.pkmn === pkmn);\n\n        if (findPokemon === undefined) {\n            //For when double clicking a Pokemon.\n            this.setState({ \n                message: \"Already clicked this Pokemon!\",\n                topScore: (this.state.curScore > this.state.topScore) ? this.state.curScore : this.state.topScore,\n                curScore: 0,\n                pokemon: pokemon,\n                unselectedPokemon: pokemon\n            });\n        }\n        else {\n            //For when not double clicking a Pokemon.\n            const newPokemon = this.state.unselectedPokemon.filter(item => item.pkmn !== pkmn);\n            \n            this.setState({ \n                message: \"Good! Keep Trying!\",\n                curScore: this.state.curScore + 1,\n                pokemon: pokemon,\n                unselectedPokemon: newPokemon\n            });\n        }\n\n        this.shuffleArray(pokemon);\n    };\n\n    //Components rendered to the screen.\n    render() {\n        return (\n            <Wrapper>\n            <Header />\n            <Instructions />\n            <Navigation\n            message={this.state.message}\n            curScore={this.state.curScore}\n            topScore={this.state.topScore}\n            />\n            <Wrapper>\n            {\n                this.state.pokemon.map(pokemon => (\n                    <PokemonCard\n                        pkmn={pokemon.pkmn}\n                        image={pokemon.image}\n                        selectPokemon={this.selectPokemon} \n                        curScore={this.state.curScore}\n                    />\n                ))\n            }\n            </Wrapper>\n            <Footer />\n            </Wrapper>\n        );\n    }\n}\n\n//Export Component for Use in the Rest of Application.\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}